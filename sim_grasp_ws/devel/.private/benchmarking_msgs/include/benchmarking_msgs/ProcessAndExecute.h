// Generated by gencpp from file benchmarking_msgs/ProcessAndExecute.msg
// DO NOT EDIT!


#ifndef BENCHMARKING_MSGS_MESSAGE_PROCESSANDEXECUTE_H
#define BENCHMARKING_MSGS_MESSAGE_PROCESSANDEXECUTE_H

#include <ros/service_traits.h>


#include <benchmarking_msgs/ProcessAndExecuteRequest.h>
#include <benchmarking_msgs/ProcessAndExecuteResponse.h>


namespace benchmarking_msgs
{

struct ProcessAndExecute
{

typedef ProcessAndExecuteRequest Request;
typedef ProcessAndExecuteResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct ProcessAndExecute
} // namespace benchmarking_msgs


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::benchmarking_msgs::ProcessAndExecute > {
  static const char* value()
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const ::benchmarking_msgs::ProcessAndExecute&) { return value(); }
};

template<>
struct DataType< ::benchmarking_msgs::ProcessAndExecute > {
  static const char* value()
  {
    return "benchmarking_msgs/ProcessAndExecute";
  }

  static const char* value(const ::benchmarking_msgs::ProcessAndExecute&) { return value(); }
};


// service_traits::MD5Sum< ::benchmarking_msgs::ProcessAndExecuteRequest> should match
// service_traits::MD5Sum< ::benchmarking_msgs::ProcessAndExecute >
template<>
struct MD5Sum< ::benchmarking_msgs::ProcessAndExecuteRequest>
{
  static const char* value()
  {
    return MD5Sum< ::benchmarking_msgs::ProcessAndExecute >::value();
  }
  static const char* value(const ::benchmarking_msgs::ProcessAndExecuteRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::benchmarking_msgs::ProcessAndExecuteRequest> should match
// service_traits::DataType< ::benchmarking_msgs::ProcessAndExecute >
template<>
struct DataType< ::benchmarking_msgs::ProcessAndExecuteRequest>
{
  static const char* value()
  {
    return DataType< ::benchmarking_msgs::ProcessAndExecute >::value();
  }
  static const char* value(const ::benchmarking_msgs::ProcessAndExecuteRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::benchmarking_msgs::ProcessAndExecuteResponse> should match
// service_traits::MD5Sum< ::benchmarking_msgs::ProcessAndExecute >
template<>
struct MD5Sum< ::benchmarking_msgs::ProcessAndExecuteResponse>
{
  static const char* value()
  {
    return MD5Sum< ::benchmarking_msgs::ProcessAndExecute >::value();
  }
  static const char* value(const ::benchmarking_msgs::ProcessAndExecuteResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::benchmarking_msgs::ProcessAndExecuteResponse> should match
// service_traits::DataType< ::benchmarking_msgs::ProcessAndExecute >
template<>
struct DataType< ::benchmarking_msgs::ProcessAndExecuteResponse>
{
  static const char* value()
  {
    return DataType< ::benchmarking_msgs::ProcessAndExecute >::value();
  }
  static const char* value(const ::benchmarking_msgs::ProcessAndExecuteResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // BENCHMARKING_MSGS_MESSAGE_PROCESSANDEXECUTE_H
