// Generated by gencpp from file benchmarking_msgs/Grasp2D.msg
// DO NOT EDIT!


#ifndef BENCHMARKING_MSGS_MESSAGE_GRASP2D_H
#define BENCHMARKING_MSGS_MESSAGE_GRASP2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace benchmarking_msgs
{
template <class ContainerAllocator>
struct Grasp2D_
{
  typedef Grasp2D_<ContainerAllocator> Type;

  Grasp2D_()
    : px(0)
    , py(0)
    , angle(0.0)
    , width(0.0)
    , quality(0.0)  {
    }
  Grasp2D_(const ContainerAllocator& _alloc)
    : px(0)
    , py(0)
    , angle(0.0)
    , width(0.0)
    , quality(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _px_type;
  _px_type px;

   typedef int32_t _py_type;
  _py_type py;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _width_type;
  _width_type width;

   typedef float _quality_type;
  _quality_type quality;





  typedef boost::shared_ptr< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> const> ConstPtr;

}; // struct Grasp2D_

typedef ::benchmarking_msgs::Grasp2D_<std::allocator<void> > Grasp2D;

typedef boost::shared_ptr< ::benchmarking_msgs::Grasp2D > Grasp2DPtr;
typedef boost::shared_ptr< ::benchmarking_msgs::Grasp2D const> Grasp2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::benchmarking_msgs::Grasp2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::benchmarking_msgs::Grasp2D_<ContainerAllocator1> & lhs, const ::benchmarking_msgs::Grasp2D_<ContainerAllocator2> & rhs)
{
  return lhs.px == rhs.px &&
    lhs.py == rhs.py &&
    lhs.angle == rhs.angle &&
    lhs.width == rhs.width &&
    lhs.quality == rhs.quality;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::benchmarking_msgs::Grasp2D_<ContainerAllocator1> & lhs, const ::benchmarking_msgs::Grasp2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace benchmarking_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a323a3d1bda5a089014491acc7a2710";
  }

  static const char* value(const ::benchmarking_msgs::Grasp2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a323a3d1bda5a08ULL;
  static const uint64_t static_value2 = 0x9014491acc7a2710ULL;
};

template<class ContainerAllocator>
struct DataType< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "benchmarking_msgs/Grasp2D";
  }

  static const char* value(const ::benchmarking_msgs::Grasp2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 px\n"
"int32 py\n"
"float32 angle\n"
"float32 width\n"
"float32 quality\n"
;
  }

  static const char* value(const ::benchmarking_msgs::Grasp2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.px);
      stream.next(m.py);
      stream.next(m.angle);
      stream.next(m.width);
      stream.next(m.quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Grasp2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::benchmarking_msgs::Grasp2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::benchmarking_msgs::Grasp2D_<ContainerAllocator>& v)
  {
    s << indent << "px: ";
    Printer<int32_t>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<int32_t>::stream(s, indent + "  ", v.py);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "quality: ";
    Printer<float>::stream(s, indent + "  ", v.quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BENCHMARKING_MSGS_MESSAGE_GRASP2D_H
